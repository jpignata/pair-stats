#!/usr/bin/env ruby

require 'open3'
require 'optparse'
require 'date'

class PairStats

  DEFAULT_DAYS_TO_ANALYZE = 30

  def analyze(author, options)
    @author = author
    @options = options

    get_raw_commit_log
    parse_log

    unless all_authors.include?(@author)
      puts "No commits for #{author} found between #{(Date.today - days).to_s} and #{Date.today.to_s}\n"
      puts "Valid authors: #{all_authors.join(", ")}" if all_authors.size > 0
      exit
    end

    puts "Pairing stats for #{@author} since #{(Date.today - days).to_s}\n\n"
    puts "Developer            Days     Commits  %"
    puts "---------------      ----     -------  ---"
    stats.each do |stat|
      puts "%-20s %-8d %-8d %-1d%\n" % [stat[:author],
            stat[:days_paired],
            number_of_commits_with(stat[:author]),
            (stat[:days_paired].to_f / total_pair_days.to_f * 100)]
    end
  end

  private

    def days
      @options[:days] || DEFAULT_DAYS_TO_ANALYZE
    end

    def git_log_command
      "git log --format='%ci|%an' --since='#{days} days ago'"
    end


    def get_raw_commit_log
      output = ""

      Open3.popen3(git_log_command) do |stdin, stdout, stderr|
        while tmp = stdout.read(1024)
          output << tmp
        end
      end

      @raw_commit_log = output.split("\n")
    end

    def parse_log
      @commits = @raw_commit_log.map do |commit|
        date, author = commit.split("|")
        { :date => Date.parse(date),
          :authors => author.split(/ and | ?& ?| ?, ?/) }
      end
    end

    def all_authors
      @commits.map { |commit| commit[:authors] }.flatten.compact.uniq
    end

    def stats
      @stats ||= begin
        stats = pair_commits
        stats << { :author => "Solo", :days_paired => number_of_unique_days_in(solo_commits) }
        stats.sort { |a,b| b[:days_paired] <=> a[:days_paired] }
      end
    end

    def pair_commits
      other_authors.map do |author|
        { :author => author, 
          :days_paired => number_of_unique_days_in(commits_with(author)),
          :commits => commits_with(author).size }
      end
    end

    def other_authors
      all_authors.reject { |author| author == @author }
    end

    def number_of_unique_days_in(commits)
      commits.map { |c| c[:date].to_s }.uniq.size
    end

    def commits_with(author)
      @commits.select do |commit|
        commit[:authors].include?(@author) && commit[:authors].include?(author)
      end
    end

    def solo_commits
      @commits.select do |commit|
        commit[:authors].size == 1 && commit[:authors].include?(@author)
      end
    end

    def number_of_commits_with(author)
      author == "Solo" ? solo_commits.size : stats.detect { |s| s[:author] == author }[:commits]
    end

    def total_pair_days
      stats.inject(0) { |sum, stat| sum + stat[:days_paired] }
    end

end

options = {}
OptionParser.new do |opts| 
  opts.on('-d [N]', '--days [NUMBER OF DAYS]', "number of days to analyze") { |days| options[:days] = days.to_i }
end.parse!

if ARGV.size == 0
  puts "Usage: pair-stats [OPTIONS] <full name>"
  exit
end

PairStats.new.analyze(ARGV.join(" "), options)
